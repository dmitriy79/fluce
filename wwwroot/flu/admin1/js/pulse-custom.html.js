if(!window.ng_flussonic_templates) window.ng_flussonic_templates = angular.module('flussonic-templates',[]);window.ng_flussonic_templates.run(['$templateCache', function($templateCache) {
  $templateCache.put('/flu/html/pulse-custom.html', '<div class="container" ng-controller="PulseCustomController">\n\n  <h3>Custom pulse</h3>\n  <div class="row">\n    <div class="col-xs-12">\n      Here you can make custom queries to stored Flussonic pulse. For example:\n      <code>sum:1m-avg:total_input{from=-10h}</code>\n    </div>\n  </div>\n\n\n  <div class="form row" style="margin-bottom: 30px">\n    <textarea class="form-control" rows="3" ng-model="raw_query"></textarea>\n    <div class="col-md-2" style="margin-top:10px;">\n      <button type="submit" class="form-control btn btn-default" ng-click="show()">Show pulse</button>\n    </div>\n  </div>\n  <div class="row" style="margin-bottom: 30px" ng-if="queries && queries[0] && !!queries[0].value">\n    <div ng-repeat="query in queries track by $index"\n       pulse-flow="{{query.value}}" pulse-name="{{query.name}}" subscribe="{{!query.value.indexOf(\'from=\') < 0 }}"\n       resolution="{{resolution}}" options="{{query.options}}"\n       style=\'height: 300px; padding-top: 20px;\'>\n    </div>\n  </div>\n\n  <div class="row" style="margin-bottom: 30px">\n    <div class="col-xs-12">\n      Known pulses:\n\n      <dl>\n        <dt>total_input</dt> <dd>bit/s of input traffic. Available tags:  <code>interface=eth0</code>. \n          Example: <code>sum:1m-avg:total_input</code></dd>\n        <dt>total_output</dt> <dd>bit/s of output traffic. Available tags:  <code>interface=eth0</code></dd>\n        <dt>total_clients</dt> <dd>Amount of online sessions</dd>\n\n        <dt>media_input</dt> <dd>bit/s of input traffic per stream. Available tags: <code>media=ort</code>, <code>prefix=client_15</code>. </dd>\n        <dt>media_output</dt> <dd>bit/s of output traffic per stream or file. Available tags: <code>media=ort</code>, <code>prefix=client_15</code>. Example:\n        <code>sum:1m-avg:media_output{media=ort}</code>\n        </dd>\n        <dt>media_clients</dt> <dd>Amount of watchers per stream or file. Available tags: <code>media=ort</code>, <code>prefix=client_15</code></dd>\n\n\n        <dt>disk_io_usage</dt> <dd>% of used disk throughput. Required tags: <code>disk=sda</code>. If you don\'t specify tag, than use <code>max</code> aggregator, because default <code>sum</code> is useless.</dd>\n        <dt>cpu_usage</dt> <dd>% of used CPU time</dd>\n\n        <dt>total_memavail</dt> <dd>Amount of available RAM (MB).</dd>\n        <dt>total_memused</dt> <dd>Amount of used RAM (MB)</dd>\n        <dt>total_memusage</dt> <dd>% of used memory</dd>\n        <dt>thumbnailer_memusage</dt> <dd>% of used memory by thumbnailer</dd>\n        <dt>thumbnailer_in</dt> <dd>kbit/s of input to thumbnailer</dd>\n        <dt>thumbnailer_out</dt> <dd>kbit/s of output to thumbnailer</dd>\n\n      </dl>\n    </div>\n  </div>\n</div> \n\n<style type="text/css">\ndl dd {\n  margin-left: 3em;\n  margin-bottom: 1em;\n}\n</style>\n');
}]);
